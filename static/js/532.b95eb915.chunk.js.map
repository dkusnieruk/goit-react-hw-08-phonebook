{"version":3,"file":"static/js/532.b95eb915.chunk.js","mappings":"wKACA,EAAwB,wBAAxB,EAAwD,wBAAxD,EAAuF,uBAAvF,EAAuH,yB,UCAvH,EAAyH,8BAAzH,EAAgK,4BCAhK,EAA+B,kCAA/B,EAA8E,gC,SCiC9E,MA7BA,YAAmC,IAAZA,EAAW,EAAXA,QACfC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,gBAAIC,UAAWC,EAAf,UACGJ,EAAQK,KADX,KACmBL,EAAQM,QACzB,mBACEH,UAAWC,EACXG,KAAK,SACLC,GAAIR,EAAQQ,GACZC,QAAS,kBAAMR,GAASS,EAAAA,EAAAA,IAAcV,EAAQQ,IAArC,EAJX,iBAFkCR,EAAQQ,KAajD,ECyBD,MAxCA,WACE,IAAMG,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAEvBC,GADSF,EAAAA,EAAAA,IAAYG,EAAAA,IACAC,QACrBC,GAAeL,EAAAA,EAAAA,IAAYM,EAAAA,IAEjC,OACE,gCACGD,EAAaE,YACZ,cAAGhB,UAAWC,EAAd,+BAEDa,EAAaG,QAAS,cAAGjB,UAAWC,EAAd,SAA2Ba,EAAaG,SAE/D,eAAIjB,UAAWC,EAAf,SACGO,EACEU,QAAO,SAAArB,GACN,IAAMsB,EAAaR,EAAYS,cAG/B,OAFoBvB,EAAQK,KAAKkB,cAEdC,SAASF,EAC7B,IACAG,KAAI,SAACzB,EAAS0B,GACb,OAAO,SAAC,EAAD,CAAa1B,QAASA,EAAS0B,MAAOA,GAAYA,EAC1D,QAIV,ECjCD,EAAwB,sBAAxB,EAAsD,sBCE/C,SAASC,IACd,IAAM1B,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,mBAAOC,UAAWC,EAAlB,oBAEE,kBACEwB,SAAU,SAAAC,GAAK,OACb5B,GAAS6B,EAAAA,EAAAA,IAAeD,EAAME,cAAcC,OAD/B,EAGf7B,UAAWC,EACXG,KAAK,SACLF,KAAK,eAKd,CCqED,MA/EA,WACE,IAAM4B,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAcD,EAAAA,EAAAA,QAAO,MACrBvB,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBZ,GAAWC,EAAAA,EAAAA,MAoCjB,OAlCAkC,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,MACV,GAAE,CAACpC,KAiCF,iCACE,kBAAME,UAAWC,EAAUkC,SANV,SAAAT,GACnBA,EAAMU,iBA3BiB,WACvB,IAAMC,EAAcP,EAAUQ,QAAQT,MAChCU,EAAaP,EAAYM,QAAQT,MAEpBrB,EAASU,QAAO,SAAArB,GACjC,IAAM2C,EAAc3C,EAAQK,KAAKkB,cAC3BqB,EAAaJ,EAAYjB,cAE/B,QAAIoB,EAAYnB,SAASoB,EAG1B,IAEcC,OAAS,EACtBC,MAAM,qCAAD,OAAiCN,IAEtCvC,GACE8C,EAAAA,EAAAA,IAAW,CACT1C,KAAMmC,EACNlC,OAAQoC,KAGdT,EAAUQ,QAAQT,MAAQ,GAC1BG,EAAYM,QAAQT,MAAQ,EAC7B,CAICgB,EACD,EAGG,WACE,mBAAO7C,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACX6C,IAAKhB,EACL1B,KAAK,OACLF,KAAK,OACL6C,QAAQ,yHACRC,MAAM,yIACNC,YAAY,cACZC,UAAQ,QAGZ,mBAAOlD,UAAWC,EAAlB,oBAEE,kBACE6C,IAAKd,EACLhC,UAAWC,EACXG,KAAK,MACLF,KAAK,SACL+C,YAAY,aACZF,QAAQ,yFACRC,MAAM,+FACNE,UAAQ,QAGZ,mBAAQlD,UAAWC,EAAYG,KAAK,SAApC,6BAIF,SAACoB,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["webpack:///./src/components/Contacts/contacts.module.css?1e09","webpack:///./src/components/ContactList/contactList.module.css?ddc0","webpack:///./src/components/ContactItem/contactItem.module.css?65f5","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","webpack:///./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.js","components/Contacts/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"contacts_label__G7+R4\",\"input\":\"contacts_input__E45sv\",\"form\":\"contacts_form__hFncB\",\"button\":\"contacts_button__3-8cg\"};","// extracted by mini-css-extract-plugin\nexport default {\"removeButton\":\"contactList_removeButton__Nt9bm\",\"singleItem\":\"contactList_singleItem__eT-KT\",\"listMain\":\"contactList_listMain__cVb-h\",\"loader\":\"contactList_loader__jUsIC\"};","// extracted by mini-css-extract-plugin\nexport default {\"removeButton\":\"contactItem_removeButton__urH7I\",\"singleItem\":\"contactItem_singleItem__IsyrQ\",\"listMain\":\"contactItem_listMain__BZICj\"};","import { deleteContact } from 'Redux/ContactsSlice';\nimport { useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\n\nimport css from '../ContactItem/contactItem.module.css';\nfunction ContactItem({ contact }) {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <li className={css.singleItem} key={contact.id}>\n        {contact.name}: {contact.number}\n        <button\n          className={css.removeButton}\n          type=\"button\"\n          id={contact.id}\n          onClick={() => dispatch(deleteContact(contact.id))}\n        >\n          X\n        </button>\n      </li>\n    </>\n  );\n}\nContactItem.propTypes = {\n  deleteContact: propTypes.func,\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n      number: propTypes.number,\n    })\n  ),\n};\n\nexport default ContactItem;\n","import { selectArray, selectContacts } from 'Redux/ContactsSlice';\nimport { selectFilters } from 'Redux/FilterSlice';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport css from '../ContactList/contactList.module.css';\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nfunction ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilters);\n  const filterValue = filter.filters;\n  const initialArray = useSelector(selectArray);\n\n  return (\n    <>\n      {initialArray.isLoading && (\n        <p className={css.loader}>Loading data ... </p>\n      )}\n      {initialArray.error && <p className={css.loader}>{initialArray.error}</p>}\n\n      <ul className={css.listMain}>\n        {contacts\n          .filter(contact => {\n            const searchType = filterValue.toLowerCase();\n            const contactType = contact.name.toLowerCase();\n\n            return contactType.includes(searchType);\n          })\n          .map((contact, index) => {\n            return <ContactItem contact={contact} index={index} key={index} />;\n          })}\n      </ul>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contact: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n      number: propTypes.number,\n    })\n  ),\n  filter: propTypes.string,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"filter_label__nHxuJ\",\"input\":\"filter_input__sX944\"};","import { useDispatch } from 'react-redux';\nimport { setFilterValue } from '../../Redux/FilterSlice';\nimport css from '../Filter/filter.module.css';\nexport function Filters() {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <label className={css.label}>\n        Search\n        <input\n          onChange={event =>\n            dispatch(setFilterValue(event.currentTarget.value))\n          }\n          className={css.input}\n          type=\"search\"\n          name=\"filter\"\n        ></input>\n      </label>\n    </>\n  );\n}\n","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addContact,\n  fetchContacts,\n  selectContacts,\n} from '../../Redux/ContactsSlice';\nimport css from '../Contacts/contacts.module.css';\nimport { useEffect } from 'react';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Filters } from 'components/Filter/Filter';\nfunction Contacts() {\n  const inputName = useRef(null);\n  const inputNumber = useRef(null);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleAddContact = () => {\n    const contactText = inputName.current.value;\n    const numberText = inputNumber.current.value;\n\n    const checkArray = contacts.filter(contact => {\n      const filterArray = contact.name.toLowerCase();\n      const filterName = contactText.toLowerCase();\n\n      if (filterArray.includes(filterName)) {\n        return true;\n      } else return false;\n    });\n\n    if (checkArray.length > 0) {\n      alert(`Masz już kontakt o imieniu : ${contactText}`);\n    } else\n      dispatch(\n        addContact({\n          name: contactText,\n          number: numberText,\n        })\n      );\n    inputName.current.value = '';\n    inputNumber.current.value = '';\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    handleAddContact();\n  };\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.label}>\n          Name\n          <input\n            className={css.input}\n            ref={inputName}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Add contact\"\n            required\n          />\n        </label>\n        <label className={css.label}>\n          Number\n          <input\n            ref={inputNumber}\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Add Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={css.button} type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n      <Filters />\n      <ContactList />\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["contact","dispatch","useDispatch","className","css","name","number","type","id","onClick","deleteContact","contacts","useSelector","selectContacts","filterValue","selectFilters","filters","initialArray","selectArray","isLoading","error","filter","searchType","toLowerCase","includes","map","index","Filters","onChange","event","setFilterValue","currentTarget","value","inputName","useRef","inputNumber","useEffect","fetchContacts","onSubmit","preventDefault","contactText","current","numberText","filterArray","filterName","length","alert","addContact","handleAddContact","ref","pattern","title","placeholder","required"],"sourceRoot":""}